package org.collection;

/**
 * Big O – это мера эффективности «в худшем случае», верхняя граница того,
 * сколько времени потребуется для выполнения задачи,
 * или сколько памяти для этого необходимо.
 * Например, поиск элемента в несортированном списке имеет значение O(n).
 * Для получения результата, возможно, вам придется перебрать весь список.
 */

public class BigONatation {

    /**
     * О(1) - сложность 1 или алгоритм выполняется за const время.
     * О(1) самый эффективный алгоритм, так как вне зависимости от кол-ва элементов,
     * метод будет работать одно и то же время const
     *
     * О(n) - это сложность порядка n или линейный алгоритм, или алгоритм масштабируется линейно
     * т.е чем больше элементов, тем больше шагов потребуется для выполнения действия
     * кол-во операций пропорционально возрастает относительно кол-ва элементов
     * Пример:
     * int[] arr = {1, 2, 3, 4, ..., 999}
     * сложность поиска цифры 999 - О(999)
     *
     * O(n^2) - сложность порядка n квадрат
     * Алгоритмы с вложенными циклами по той же коллекции всегда O(n^2)
     *
     * O(log n) - это сложность порядка log n или логарифмическая сложность
     */
}
